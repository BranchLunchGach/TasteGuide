name: Build and Deploy

on:
  push:
    branches:
      - dev  # 'dev' 브랜치에 push할 때 트리거

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 'contents' 권한을 'write'로 설정하여 푸시 권한 부여

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # 전체 히스토리를 가져와서 변경 사항 비교가 가능하도록 설정

      # 2. Java와 Maven 설치
      - name: Set up Java and Maven
        uses: actions/setup-java@v2
        with:
          java-version: '17'         # Java 17 설치
          distribution: 'zulu'       # OpenJDK 배포판 Zulu 사용
          maven-version: '3.9.9'     # 로컬과 동일한 Maven 버전 지정
          cache: 'maven'             # Maven 의존성 캐싱

      # 3. Java와 Maven 설치 확인
      - name: Verify Java and Maven installation
        run: |
          echo "Java version:"        # Java 설치 확인
          java -version
          echo "Maven version:"       # Maven 설치 확인
          mvn -v

      # 4. Maven 빌드 실행
      - name: Build with Maven
        run: |
          echo "Running mvn clean install to build project..."   # 빌드 실행 시작 알림
          mvn clean install -DskipTests  # 소스 코드 빌드 및 .war 파일 생성
          echo "Build completed."      # 빌드 완료 메시지

      # 5. .war 파일 생성 확인
      - name: Verify WAR file location
        run: |
          echo "Checking for .war file in target directory..."
          # target 디렉터리 내의 파일들 나열
          ls -l target/  # target 디렉터리 내용 출력
          # .war 파일 경로 확인
          if [ -f "target/spring-0.0.1-SNAPSHOT.war" ]; then
            echo "WAR file found at target/spring-0.0.1-SNAPSHOT.war"
          else
            echo "WAR file not found!"
            exit 1  # 오류 발생 시 종료

      # 6. deploy 브랜치 준비
      - name: Prepare deploy branch
        run: |
          # Git 사용자 설정
          git config --global user.name "pleasebelieveme"
          git config --global user.email "cain1227@naver.com"
          
          # deploy 브랜치가 존재하는지 확인하고 체크아웃, 없으면 새로 생성
          if git rev-parse --verify deploy; then
            git checkout deploy
            git pull origin deploy  # 최신 커밋 가져오기
          else
            git checkout --orphan deploy  # deploy 브랜치가 없으면 새로운 빈 브랜치 생성
            git rm -rf .  # 기존 파일 삭제

      # 7. 기존 파일 삭제, .war 파일은 제외
      - name: Delete old files, keep WAR file
        run: |
          # 모든 파일을 삭제하되, .war 파일은 제외
          git ls-files | grep -v 'target/spring-0.0.1-SNAPSHOT.war' | xargs -I {} git rm -f {}
          rm -rf * .[^.]*  # 불필요한 파일 삭제

          # .war 파일이 있는지 확인하고, 있으면 스테이지에서 제외하지 않도록 설정
          git add target/spring-0.0.1-SNAPSHOT.war

      # 8. .war 파일 추가 및 푸시
      - name: Commit and push WAR file
        run: |
          # 변경 사항이 있을 때에만 커밋 및 푸시 수행
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing .war file."
            git commit -m "Deploy Spring Boot build files"
            # GitHub 토큰을 사용하여 deploy 브랜치에 푸시
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/BranchLunchGach/TasteGuide.git deploy --force
          else
            echo "No changes to commit"
