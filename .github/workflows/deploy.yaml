name: Build and Deploy

on:
  push:
    branches:
      - believeme  # 'believeme' 브랜치에 푸시할 때 트리거

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Java 설치 (Java 17, OpenJDK)
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # 필요한 Java 버전
          distribution: 'zulu'  # 지원되는 OpenJDK 배포판 중 하나

      # 3. Java 설치 확인
      - name: Verify Java installation
        run: java -version

      # 4. Maven 설치
      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      # 5. Maven 설치 확인
      - name: Verify Maven installation
        run: mvn -v

      # 6. Maven 빌드 실행 (변경된 파일만 빌드)
      - name: Build with Maven (if changes detected)
        run: |
          echo "Checking for changes in source files..."
          if [ -z "${{ github.event.before }}" ]; then
            # 첫 푸시 또는 새로운 브랜치일 경우 전체 빌드를 실행
            echo "First push or new branch, running mvn install."
            mvn install -DskipTests
          else
            # `before` 커밋과 `sha` 커밋을 비교하여 변경된 파일이 src 폴더에 있는지 확인
            if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q 'src'; then
              echo "Changes detected in source files, running mvn install."
              mvn install -DskipTests
            else
              echo "No source code changes, skipping build."
            fi
          fi

      # 7. deploy 브랜치 체크아웃 (deploy 브랜치가 없다면 생성)
      - name: Checkout deploy branch
        run: |
          git config --global user.name "pleasebelieveme"
          git config --global user.email "cain1227@naver.com"
          git checkout deploy || git checkout --orphan deploy  # 'deploy' 브랜치가 없으면 새로 생성

      # 8. 이전 파일 삭제 (현재는 .war 파일만 남길 것임)
      - name: Clean deploy branch
        run: |
          git rm -rf .  # 기존 파일들을 제거

      # 9. 빌드 파일 복사 (node_modules 제외)
      - name: Copy build files
        run: |
          echo "Listing files in target directory:"
          ls -l target/
          
          if [ -d "target" ] && [ "$(ls -A target)" ]; then
            # target 디렉토리 내 .war 파일이 존재하는지 확인
            echo "Copying .war file from target directory..."
            cp target/spring-0.0.1-SNAPSHOT.war .
          else
            echo "No build files to copy"
            exit 1  # 빌드 파일이 없으면 에러 종료
          fi

      # 10. 변경 사항이 있는 경우에만 커밋 및 푸시
      - name: Commit and push if there are changes
        run: |
          git add spring-0.0.1-SNAPSHOT.war
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing .war file."
            git commit -m "Deploy Spring Boot build files"
            # GitHub Token을 사용하여 인증
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/BranchLunchGach/TASTEGUDIE-BACK.git deploy --force
          else
            echo "No changes to commit"
          fi
