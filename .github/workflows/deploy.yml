name: Build, Deploy, and Update EC2

on:
  push:
    branches:
      - main  # 'believeme' 브랜치에 푸시할 때 트리거

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 'contents' 권한을 'write'로 설정하여 푸시 권한 부여

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Node.js 설치
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'  # 필요한 Node.js 버전으로 수정

      # 3. 환경 변수 적용 (Secrets에서 가져오기)
      - name: Set up environment variables
        run: |
          echo "${{ secrets.ENV }}" > .env
        env:
          ENV: ${{ secrets.ENV }}  # GitHub Secrets에 저장된 ENV 변수 사용

      # 4. 의존성 설치 및 빌드
      - name: Install dependencies and build
        run: |
          npm install
          npm run build
        env:
          CI: false  # CI 환경 변수를 false로 설정하여 ESLint 경고를 무시

      # 5. AWS CLI 설치
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      # 6. AWS 설정
      - name: Configure AWS
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "${{ secrets.AWS_REGION }}"  # AWS_REGION 환경 변수를 사용하여 리전 설정

      # 7. 빌드 파일을 S3로 업로드 (덮어쓰기, TASTEGUDIE-FRONT 폴더에 업로드)
      - name: Upload to S3
        run: |
          aws s3 cp build/ s3://tasteguide/TASTEGUDIE-FRONT/ --recursive  # build 폴더를 TASTEGUDIE-FRONT 폴더에 업로드

      # 8. EC2에 SSH로 접속하여 S3에서 파일 다운로드 후 Springboot 재시작
      - name: Deploy to EC2 and Restart Springboot
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private-key.pem
          chmod 600 private-key.pem
          
          # S3에서 파일 다운로드
          ssh -o StrictHostKeyChecking=no -i private-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} \
            "aws s3 cp s3://tasteguide/tasteguide.war /home/ubuntu/ && \
            sudo systemctl restart springboot"
        env:
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_IP }}
