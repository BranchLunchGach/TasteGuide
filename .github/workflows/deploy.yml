name: Build and Deploy

on:
  push:
    branches:
      - main # main에 푸쉬될때 트리거

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1. 리포지토리 체크아웃 (Git LFS 활성화)
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true  # Git LFS 활성화

      # 2. Java와 Maven 설치
      - name: Set up Java and Maven
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'
          maven-version: '3.9.9'
          cache: 'maven'

      # 3. application.properties 설정 (GitHub secret로부터)
      - name: Create resources directory and configure application.properties
        run: |
          mkdir -p src/main/resources  # src/main/resources 디렉토리 생성
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties
          
      - name: Verify application.properties
        run: cat src/main/resources/application.properties
        
      # 4. Maven 빌드 실행
      - name: Build with Maven
        run: |
          echo "Running mvn clean install to build project..."
          mvn clean install -DskipTests
          echo "Build completed."

      # 5. .war 파일 생성 확인
      - name: Verify WAR file location
        run: |
          echo "Checking for .war file in target directory..."
          ls -l target/
          if [ -f "target/spring-0.0.1-SNAPSHOT.war" ]; then
            echo "WAR file found at target/spring-0.0.1-SNAPSHOT.war"
          else
            echo "WAR file not found!"
            exit 1
          fi

      # 6. deploy 브랜치 체크아웃
      - name: Checkout deploy branch
        run: |
          git config --global user.name "pleasebelieveme"
          git config --global user.email "cain1227@naver.com"
          git checkout deploy || git checkout --orphan deploy
          git rm -rf .

      # 7. 기존 파일 삭제, .war 파일은 제외
      - name: Delete old files, keep WAR file
        run: |
          cp -r target/spring-0.0.1-SNAPSHOT.war .
          rm -rf target

      # 8. AWS S3에 WAR 파일 업로드
      - name: Upload WAR file to S3
        run: |
          aws s3 cp spring-0.0.1-SNAPSHOT.war s3://tasteguide/tasteguide.war
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
